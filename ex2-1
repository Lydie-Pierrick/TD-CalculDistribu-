#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <ctype.h>
#include <unistd.h>

void generateT(double *T, int N)
{
  int i = 0;
  for(i = 0; i < N; ++i)
    T[i] = ((double) rand() / (double) (RAND_MAX) ) * 2;
}

void filtreT(double *T, int N)
{
  int i = 0;
  for(i = 1; i < N - 1; ++i)
    T[i] = (T[i-1] + T[i+1])/2;
}

int main(int argc, char** argv)
{
	MPI_Init(&argc, &argv);

	int wrank;
	MPI_Comm_rank(MPI_COMM_WORLD, &wrank);
  int world_size;
	MPI_Comm_size(MPI_COMM_WORLD, &world_size);

	srand(time(NULL) + wrank);

  int N = 10000000;
  int p1 = 1;
  int p0 = 0;
  int tag = 0;
  int j;

  double timeStart;
  double timeTotal;

  MPI_Request request;

  double * T1 = calloc(N, sizeof(double));
  double * T2 = calloc(N, sizeof(double));
  double * T = calloc(N, sizeof(double));

  for(j = 0; j < 100; j++)
  {
    //printf("Wrank = %d, Times = %d\n", wrank, j+1);
    if(wrank == 0)
    {

      timeStart = MPI_Wtime();

      generateT(T1, N);
      //MPI_Ssend(T1, N, MPI_DOUBLE, p1, tag, MPI_COMM_WORLD);
      MPI_Isend(T1, N, MPI_DOUBLE, p1, tag, MPI_COMM_WORLD, &request);
      generateT(T2, N);
      filtreT(T2, N);

      MPI_Wait(&request, MPI_STATUS_IGNORE);

      timeTotal += MPI_Wtime() - timeStart;
    }
    else if(wrank == 1)
    {

      // MPI_Recv(T, N, MPI_DOUBLE, p0, tag, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
      // filtreT(T, N);


      MPI_Irecv(T, N, MPI_DOUBLE, p0, tag, MPI_COMM_WORLD, &request);

      MPI_Wait(&request, MPI_STATUS_IGNORE);
      filtreT(T, N);

    }
  }

  if(wrank == 0)
    printf("Time total =  %for\n", timeTotal);

	MPI_Finalize();

	return 0;
}
