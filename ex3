#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <ctype.h>

int main(int argc, char** argv)
{
	MPI_Init(&argc, &argv);

	int wrank;
	MPI_Comm_rank(MPI_COMM_WORLD, &wrank);

	srand(time(NULL) + wrank);

	const int N = 10;
	int arrayInteger[N];
	char arrayChar[N];
	int i;
	int dest;
	int master = 0;
	int sum = 0;
	int tag1 = 4;
	int tag2 = 5;
	int tag3 = 6;
	int tag4 = 7;


	if(wrank%2 == 0) //pair
	{
				if(wrank == master) // wrank == 0
				{
						dest = 1;
						// 0 -> everyone (except for 0)
						while(dest < atoi(argv[1]))
						{
								if(dest%2 == 0)
								{
									for(i = 0; i < N; ++i)
											arrayInteger[i] = rand()%10;

									////////////////////////////////////////////////////////
									// 0 -> pair
									MPI_Ssend(&arrayInteger, N, MPI_INT, dest, tag1, MPI_COMM_WORLD);
									printf("Envoie a %d : ", dest);
									for(i = 0; i < N; ++i)
											printf("%d",arrayInteger[i]);
									printf("%s\n","");
									///////////////////////////////////////////////////////////

									// 0 <- pair
									MPI_Recv(&sum, 1, MPI_INT, dest, tag3, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
									printf("Recu de %d: %d\n", dest, sum);

								}
								else
								{
									for(i = 0; i < N; ++i)
											arrayChar[i] = 'a' + (rand()%26);
									// 0 -> impair
									MPI_Ssend(&arrayChar, N, MPI_CHAR, dest, tag2, MPI_COMM_WORLD);
									printf("Envoie a %d : ", dest);
									for(i = 0; i < N; ++i)
											printf("%c",arrayChar[i]);
									printf("%s\n","");
									// 0 <- impair
									MPI_Recv(&arrayChar, N, MPI_CHAR, dest, tag4, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
									printf("Recu de %d:", dest);
									for(i = 0; i < N; ++i)
											printf("%c", arrayChar[i]);
									printf("%s\n","");
								}
								dest ++;
						}
				}
				else // wrank != 0
				{
					// pair <- 0
					MPI_Recv(&arrayInteger, N, MPI_INT, master, tag1, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

					sum = 0;
					for(i = 0; i < N; ++i)
						sum += arrayInteger[i];
					// pair -> 0
					MPI_Ssend(&sum, 1, MPI_INT, master, tag3, MPI_COMM_WORLD);
				}
		}
		else //impair
		{
				// impair <- 0
				MPI_Recv(&arrayChar, N, MPI_CHAR, master, tag2, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

				for(i = 0; i < N; ++i)
						arrayChar[i] = toupper(arrayChar[i]);
				// impair -> 0
				MPI_Ssend(&arrayChar, N, MPI_CHAR, master, tag4, MPI_COMM_WORLD);

		}


		MPI_Finalize();

		return 0;
}
